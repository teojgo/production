#!/usr/bin/env groovy

def methods
def scmVars
def machinesList
stage("Initialization") {
    node{
        scmVars = checkout scm
        def root_dir = pwd()
        methods = load("${root_dir}/jenkins/util.groovy")
        machinesList = load("${root_dir}/jenkins/Machines.groovy") 
        switch (params.jenkinsType) {
            case "testingEB" :
                if (methods.checkWorkInProgress(env.ghprbPullTitle)) {
                    println "Work in progress detected, aborting..."
                    return 
                }
                break
            case "productionEB":
            case "regressionEB":
                return
            default:
                println "Project type not recognized, aborting..."
                return
        }
    }
}

def userMessage 
switch (params.jenkinsType) {
    case "testingEB" :
        userMessage = env.ghprbPullTitle
        break
    case "productionEB":
    case "regressionEB":
        userMessage = "${params.customMessage}"
        break;
    default:
        println "Project type not recognized, aborting..."
        return
}

def machineConfigurations = [] 
stage("Machine Selection"){
    node{    
        def machinesToRun = machinesList.findAll(
            {methods.machineCheck(userMessage, it.name)})
        for (mach in machinesToRun) {
            if( mach.name == "dom" || mach.name == "daint") {
                machineConfigurations.add(
                    [machine:mach, architectures: methods.getMachineConfiguration(
                        userMessage, mach.name)])
            }
            else {
                machineConfigurations.add([machine:mach, architectures: [""]])
            }
        }
    }
}

def builds = [:]
stage("Build Stage") {
    for (mach in machineConfigurations) {
        def machine = mach.machine
        def architectures = mach.architectures
        def machineName = machine.name 
        for (architecture in architectures) {       
            def machineLabel = machineName 
            def arch = architecture
            println "Architecture ${arch}"
            if (arch != "")  
                machineLabel = "${machineName}-${arch}"
            builds[machineLabel] = {
                node(machineName) {
                    checkout scm
                    println "Machine name: ${machineName}"
                    println "Hello from machine ${machineLabel}"
                    def commitHash = scmVars.GIT_COMMIT   
                    def project_name = env.JOB_BASE_NAME.trim() 
                    def bashScript
                    def command
                    def unuse_flag = ''
                    switch (params.jenkinsType) {
                        case "testingEB" :
                            bashScript = "testingEB.sh"
                            break
                        case "productionEB":
                            bashScript = "productionEB.sh"
                            break
                        case "regressionEB":
                            bashScript = "regressionEB.sh"
                            unuse_flag = "--unuse=${machine.unuse_path}"
                            break
                        default:
                            println "Jenkins type not recognized, aborting..."
                            return
                    }
                    
                    if (arch == "") {
                        command = "\$PWD/jenkins-builds/production.sh --list=\$PWD/jenkins-builds/${linkname} --prefix=\${PREFIX} $unuse_flag"
                    }
                    else {
                        command = "srun -u --constraint=$arch --job-name=$project_name --time=24:00:00 \$PWD/jenkins-builds/production.sh --arch=$arch --list=\$PWD/jenkins-builds/\${linkname} --prefix=\${PREFIX} $unuse_flag/ARCH/$arch --xalt=no"
                    }
                     
                    println "Command to execute: $command"
                    def bashCommand = """chmod +x \$PWD/jenkins/${bashScript}
                                         \$PWD/jenkins/${bashScript}
                                      """
                   /*------------------------------------------------------
                    ------------------------ SCRIPT ------------------------ 
                    -------------------------------------------------------*/
                    withEnv(["GIT_COMMIT=${commitHash[0..6]}",
                             "linkname=${machineLabel}",
                             "command=${command}",
                             "project_name=${project_name}"]) {
                              
                        sh bashCommand 
                    }
                }
            }
        }
    }
    parallel builds
}
