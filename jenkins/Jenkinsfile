#!/usr/bin/env groovy

/*--------------------------------------------------------------------------
---------------------------------- ENUMS -----------------------------------
--------------------------------------------------------------------------*/

enum Machine{
    DAINT("daint", 'srun -u --constraint=ARCH --job-name=$project_name --time=24:00:00',
          '$APPS/UES/jenkins/6.0.UP02/ARCH/easybuild/modules/all'),
    DOM("dom", 'srun -u --constraint=ARCH --job-name=$project_name --time=24:00:00',
        '$APPS/UES/jenkins/6.0.UP04/ARCH/easybuild/modules/all'),
    LEONE("leone", "", '$APPS/UES/RH7.3_PE17.02/modules/all/'), 
    KESCH("kesch", "", '$APPS/UES/PrgEnv-gnu-2016b'), 
    MONCH("monch", "", '$APPS/UES/jenkins/RH6.9-17.06/easybuild/modules/all/')

    final String name
    final String command
    final String unusePath

    Machine(name, command, unusePath){
        this.name = name
        this.command = command
        this.unusePath = unusePath
    }
}

/*--------------------------------------------------------------------------
--------------------------------- METHODS ----------------------------------
--------------------------------------------------------------------------*/

String getMachineConfiguration(String message, String machine) {
    def machinePattern = ".*${machine}.*"
    def machineGPU = ".*${machine}-gpu.*"
    def machineMC = ".*${machine}-mc.*"

    if (message ==~ machineGPU) {
        if (message ==~ machineMC) {
            return "gpu mc" 
        }
        else {
            return "gpu" 
        }
    }
    else if (message ==~ machineMC) {
        return "mc"
    }
     
    return "gpu mc"
}

boolean machineCheck(String message, String machine) {
    def machinePattern = ".*${machine}.*"
    
    return message ==~ machinePattern? true : false 
}

boolean checkWorkInProgress(String message) {
    if (message ==~ /.*WIP.*/) {
        return true
    }
    
    return false
}


/*--------------------------------------------------------------------------
---------------------------------- STAGES ----------------------------------
--------------------------------------------------------------------------*/

def builds = [:]

stage("Initialization") {
    if (checkWorkInProgress(env.ghprbPullTitle)) {
        println "Work in progress detected, aborting execution..."
        return 
    }
}

def machineList = [Machine.DOM, Machine.DAINT]

def bashCommand = """chmod +x \$PWD/${params.bashScript}
                     \$PWD/${params.bashScript}
                  """

def pullRequestMessage = env.ghprbPullTitle
def machinesToRun

stage("Machine Choice"){
    machinesToRun = machineList.findAll({machineCheck(pullRequestMessage, it.name})
}

stage("Testing") {
    for (m in machinesToRun) {
        def machine = m
        def machineName = m.name 

        println "Running for ${machineName}"

        builds[machine.name] = {
            node(machine.name) {
                println "Hello from machine ${machineName}"     
                def scmVars = checkout scm
                def commitHash = scmVars.GIT_COMMIT   
                def project_name = env.JOB_BASE_NAME.trim() 
                def arch_list = ""
                switch(machine){
                    case Machine.DAINT:
                    case Machine.DOM:
                        arch_list = getMachineConfiguration(pullRequestMessage, 
                                    machineName)                            
                        break 
                    default:
                        break
                }

                /*--------------------------------------------------------------------------
                ---------------------------------- SCRIPT ---------------------------------- 
                --------------------------------------------------------------------------*/

                withEnv(["GIT_COMMIT=${commitHash[0..6]}",
                         "system=${machineName}",
                         "command=${machine.command}",
                         "unuse_path=${machine.unusePath}",
                         "arch_list=${arch_list}",
                         "project_name=${project_name}"]) {

                    sh bashCommand 
                }
            }
        }
    }
    parallel builds
}
