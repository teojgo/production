#!/usr/bin/env groovy

def methods
def scmVars
def machinesList
stage("Initialization") {
    node{
        scmVars = checkout scm
        def root_dir = pwd()
        methods = load("${root_dir}/jenkins/util.groovy")
        machinesList = load("${root_dir}/jenkins/Machines.groovy")
        switch (params.jenkinsType) {
            case "testing" :
                if (methods.checkWorkInProgress(env.ghprbPullTitle)) {
                    println "Work in progress detected, aborting..."
                    return 
                }
                break
            case "production":
            case "regression":
                return
            default:
                println "Project type not recognized, aborting..."
                return
        }
    }
}

def userMessage 
switch (params.jenkinsType) {
    case "testing" :
        userMessage = env.ghprbPullTitle
        break
    case "production":
    case "regression":
        userMessage = "${params.customMessage}"
        break;
    default:
        println "Project type not recognized, aborting..."
        return
}

def machineConfigurations = [] 
stage("Machine Selection"){
    node{    
        def machinesToRun = machinesList.findAll(
            {methods.machineCheck(userMessage, it.name)})

        for (m in machinesToRun) {
            if( m.name == "dom" || m.name == "daint") {
                machineConfigurations.add(
                    [machine:m, partitions: methods.getMachineConfiguration(
                        userMessage, m.name)])
            }
            else {
                machineConfigurations.add([machine:m, partitions: [""]])
            }
        }
    }
}

def builds = [:]
stage("Build Stage") {
    for (m in machineConfigurations) {
        def machine = m.machine 
        def machineName = machine.name 
        def partitions = m.partitions
        for (p in partitions) {       
            def machineLabel = machineName 
            def arch = p
            println "Partition ${arch}"
            if (p != "")  
                machineLabel = "${machineName}-${p}"
            builds[machineLabel] = {
                node(machineName) {
                    checkout scm
                    println "Machine name: ${machineName}"
                    println "Hello from machine ${machineLabel}"
                    def commitHash = scmVars.GIT_COMMIT   
                    def project_name = env.JOB_BASE_NAME.trim() 
                    def command        
                    def bashScript
                    switch (params.jenkinsType) {
                        case "testing" :
                            bashScript = "testingEB.sh"
                            break
                        case "production":
                            bashScript = "productionEB.sh"
                            break
                        case "regression":
                            bashScript = "regressionEB.sh"
                            break
                        default:
                            println "Jenkins type not recognized, aborting..."
                            return
                    }

                    def bashCommand = """chmod +x \$PWD/jenkins/${bashScript}
                                         \$PWD/jenkins/${bashScript}
                                      """
                   /*------------------------------------------------------
                    ------------------------ SCRIPT ------------------------ 
                    -------------------------------------------------------*/
                    withEnv(["GIT_COMMIT=${commitHash[0..6]}",
                             "system=${machineName}",
                             "linkname=${machineLabel}",
                             "ARCH=${arch}",
                             "project_name=${project_name}"]) {
                        sh bashCommand 
                    }
                }
            }
        }
    }
    parallel builds
}
